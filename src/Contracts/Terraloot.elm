module Contracts.Terraloot exposing
    ( Approval
    , ApprovalForAll
    , OwnershipTransferred
    , Transfer
    , approvalDecoder
    , approvalEvent
    , approvalForAllDecoder
    , approvalForAllEvent
    , approve
    , balanceOf
    , claim
    , contractURI
    , getApproved
    , getBackpack
    , getBackpackComponents
    , getExternal
    , getExternalComponents
    , getHandheld
    , getHandheldComponents
    , getOutfit
    , getOutfitComponents
    , getRig
    , getRigComponents
    , getShoulder
    , getShoulderComponents
    , getTool
    , getToolComponents
    , getWearable
    , getWearableComponents
    , isApprovedForAll
    , name
    , oWNER_SUPPLY
    , owner
    , ownerClaim
    , ownerOf
    , ownershipTransferredDecoder
    , ownershipTransferredEvent
    , pUBLIC_SUPPLY
    , renounceOwnership
    , safeTransferFrom
    , setApprovalForAll
    , supportsInterface
    , symbol
    , synth
    , tOTAL_SUPPLY
    , tokenByIndex
    , tokenOfOwnerByIndex
    , tokenURI
    , totalSupply
    , transferDecoder
    , transferEvent
    , transferFrom
    , transferOwnership
    )

import BigInt exposing (BigInt)
import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v4.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- OWNER_SUPPLY() function


oWNER_SUPPLY : Address -> Call BigInt
oWNER_SUPPLY contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "b662dc9b" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- PUBLIC_SUPPLY() function


pUBLIC_SUPPLY : Address -> Call BigInt
pUBLIC_SUPPLY contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "8342083a" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- TOTAL_SUPPLY() function


tOTAL_SUPPLY : Address -> Call BigInt
tOTAL_SUPPLY contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "902d55a5" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- approve(address,uint256) function


approve : Address -> Address -> BigInt -> Call ()
approve contractAddress to_ tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "095ea7b3" [ E.address to_, E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- balanceOf(address) function


balanceOf : Address -> Address -> Call BigInt
balanceOf contractAddress owner_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "70a08231" [ E.address owner_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- claim(uint256) function


claim : Address -> BigInt -> Call ()
claim contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "379607f5" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- contractURI() function


contractURI : Address -> Call String
contractURI contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "e8a3d485" []
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- getApproved(uint256) function


getApproved : Address -> BigInt -> Call Address
getApproved contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "081812fc" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- getBackpack(uint256) function


getBackpack : Address -> BigInt -> Call String
getBackpack contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "27a6cadc" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- getBackpackComponents(uint256) function


getBackpackComponents : Address -> BigInt -> Call (List BigInt)
getBackpackComponents contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "8c55145c" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.staticArray 4 D.uint)
    }



-- getExternal(uint256) function


getExternal : Address -> BigInt -> Call String
getExternal contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "37accd36" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- getExternalComponents(uint256) function


getExternalComponents : Address -> BigInt -> Call (List BigInt)
getExternalComponents contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "9906d5de" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.staticArray 4 D.uint)
    }



-- getHandheld(uint256) function


getHandheld : Address -> BigInt -> Call String
getHandheld contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "8287f0b7" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- getHandheldComponents(uint256) function


getHandheldComponents : Address -> BigInt -> Call (List BigInt)
getHandheldComponents contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "a32804bb" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.staticArray 4 D.uint)
    }



-- getOutfit(uint256) function


getOutfit : Address -> BigInt -> Call String
getOutfit contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "b214070e" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- getOutfitComponents(uint256) function


getOutfitComponents : Address -> BigInt -> Call (List BigInt)
getOutfitComponents contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "f80cdc81" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.staticArray 4 D.uint)
    }



-- getRig(uint256) function


getRig : Address -> BigInt -> Call String
getRig contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "a8278c04" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- getRigComponents(uint256) function


getRigComponents : Address -> BigInt -> Call (List BigInt)
getRigComponents contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "94035249" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.staticArray 4 D.uint)
    }



-- getShoulder(uint256) function


getShoulder : Address -> BigInt -> Call String
getShoulder contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "cb7e42b7" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- getShoulderComponents(uint256) function


getShoulderComponents : Address -> BigInt -> Call (List BigInt)
getShoulderComponents contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "c0e519c5" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.staticArray 4 D.uint)
    }



-- getTool(uint256) function


getTool : Address -> BigInt -> Call String
getTool contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "d285af53" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- getToolComponents(uint256) function


getToolComponents : Address -> BigInt -> Call (List BigInt)
getToolComponents contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "3a03ca35" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.staticArray 4 D.uint)
    }



-- getWearable(uint256) function


getWearable : Address -> BigInt -> Call String
getWearable contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "45280f3e" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- getWearableComponents(uint256) function


getWearableComponents : Address -> BigInt -> Call (List BigInt)
getWearableComponents contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "ea3b4456" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.staticArray 4 D.uint)
    }



-- isApprovedForAll(address,address) function


isApprovedForAll : Address -> Address -> Address -> Call Bool
isApprovedForAll contractAddress owner_ operator_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "e985e9c5" [ E.address owner_, E.address operator_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.bool
    }



-- name() function


name : Address -> Call String
name contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "06fdde03" []
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- owner() function


owner : Address -> Call Address
owner contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "8da5cb5b" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- ownerClaim(uint256) function


ownerClaim : Address -> BigInt -> Call ()
ownerClaim contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "434f48c4" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- ownerOf(uint256) function


ownerOf : Address -> BigInt -> Call Address
ownerOf contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "6352211e" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- renounceOwnership() function


renounceOwnership : Address -> Call ()
renounceOwnership contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "715018a6" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- safeTransferFrom(address,address,uint256) function


safeTransferFrom : Address -> Address -> Address -> BigInt -> Call ()
safeTransferFrom contractAddress from_ to_ tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "42842e0e" [ E.address from_, E.address to_, E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- setApprovalForAll(address,bool) function


setApprovalForAll : Address -> Address -> Bool -> Call ()
setApprovalForAll contractAddress operator_ approved_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "a22cb465" [ E.address operator_, E.bool approved_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- supportsInterface(bytes4) function


supportsInterface : Address -> Hex -> Call Bool
supportsInterface contractAddress interfaceId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "01ffc9a7" [ E.staticBytes 4 interfaceId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.bool
    }



-- symbol() function


symbol : Address -> Call String
symbol contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "95d89b41" []
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- synth(address) function


synth : Address -> Address -> Call Hex
synth contractAddress addr_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "59252669" [ E.address addr_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.staticBytes 32)
    }



-- tokenByIndex(uint256) function


tokenByIndex : Address -> BigInt -> Call BigInt
tokenByIndex contractAddress index_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "4f6ccce7" [ E.uint index_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- tokenOfOwnerByIndex(address,uint256) function


tokenOfOwnerByIndex : Address -> Address -> BigInt -> Call BigInt
tokenOfOwnerByIndex contractAddress owner_ index_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "2f745c59" [ E.address owner_, E.uint index_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- tokenURI(uint256) function


tokenURI : Address -> BigInt -> Call String
tokenURI contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "c87b56dd" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }



-- totalSupply() function


totalSupply : Address -> Call BigInt
totalSupply contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "18160ddd" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- transferFrom(address,address,uint256) function


transferFrom : Address -> Address -> Address -> BigInt -> Call ()
transferFrom contractAddress from_ to_ tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "23b872dd" [ E.address from_, E.address to_, E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- transferOwnership(address) function


transferOwnership : Address -> Address -> Call ()
transferOwnership contractAddress newOwner_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "f2fde38b" [ E.address newOwner_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- Approval(address,address,uint256) event


type alias Approval =
    { owner : Address
    , approved : Address
    , tokenId : BigInt
    }


approvalEvent : Address -> Maybe Address -> Maybe Address -> Maybe BigInt -> LogFilter
approvalEvent contractAddress owner_ approved_ tokenId_ =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics =
        [ Just <| U.unsafeToHex "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
        , Maybe.map (abiEncode << E.address) owner_
        , Maybe.map (abiEncode << E.address) approved_
        , Maybe.map (abiEncode << E.uint) tokenId_
        ]
    }


approvalDecoder : Decoder Approval
approvalDecoder =
    Decode.succeed Approval
        |> custom (topic 1 D.address)
        |> custom (topic 2 D.address)
        |> custom (topic 3 D.uint)



-- ApprovalForAll(address,address,bool) event


type alias ApprovalForAll =
    { owner : Address
    , operator : Address
    , approved : Bool
    }


approvalForAllEvent : Address -> Maybe Address -> Maybe Address -> LogFilter
approvalForAllEvent contractAddress owner_ operator_ =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics =
        [ Just <| U.unsafeToHex "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31"
        , Maybe.map (abiEncode << E.address) owner_
        , Maybe.map (abiEncode << E.address) operator_
        ]
    }


approvalForAllDecoder : Decoder ApprovalForAll
approvalForAllDecoder =
    Decode.succeed ApprovalForAll
        |> custom (topic 1 D.address)
        |> custom (topic 2 D.address)
        |> custom (data 0 D.bool)



-- OwnershipTransferred(address,address) event


type alias OwnershipTransferred =
    { previousOwner : Address
    , newOwner : Address
    }


ownershipTransferredEvent : Address -> Maybe Address -> Maybe Address -> LogFilter
ownershipTransferredEvent contractAddress previousOwner_ newOwner_ =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics =
        [ Just <| U.unsafeToHex "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"
        , Maybe.map (abiEncode << E.address) previousOwner_
        , Maybe.map (abiEncode << E.address) newOwner_
        ]
    }


ownershipTransferredDecoder : Decoder OwnershipTransferred
ownershipTransferredDecoder =
    Decode.succeed OwnershipTransferred
        |> custom (topic 1 D.address)
        |> custom (topic 2 D.address)



-- Transfer(address,address,uint256) event


type alias Transfer =
    { from : Address
    , to : Address
    , tokenId : BigInt
    }


transferEvent : Address -> Maybe Address -> Maybe Address -> Maybe BigInt -> LogFilter
transferEvent contractAddress from_ to_ tokenId_ =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics =
        [ Just <| U.unsafeToHex "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        , Maybe.map (abiEncode << E.address) from_
        , Maybe.map (abiEncode << E.address) to_
        , Maybe.map (abiEncode << E.uint) tokenId_
        ]
    }


transferDecoder : Decoder Transfer
transferDecoder =
    Decode.succeed Transfer
        |> custom (topic 1 D.address)
        |> custom (topic 2 D.address)
        |> custom (topic 3 D.uint)
